#pragma once

#include <algorithm>   // needed by stl_alloc
#include <functional>  // for equal_to<>, etc
#include <memory>      // for alloc
#include <utility>     // for pair<>
#include <sparsehash/internal/densehashtable.h>  // IWYU pragma: export
#include <sparsehash/internal/libc_allocator_with_realloc.h>

namespace sparsehash {

namespace detail {

template <class T>
class key_wrapper {
 private:
  enum class State { empty, deleted, value };
  State state_;
  T value_;
  explicit key_wrapper(State state) : state_(state) {}
 public:
  template <class EqualT>
  struct Equal: public EqualT {
    bool operator() (const key_wrapper& lhs, const key_wrapper& rhs) const {
      return lhs.state_ == rhs.state_ &&
        (lhs.state_ != State::value || EqualT::operator() (lhs.value_, rhs.value_));
    }
    bool operator() (const key_wrapper& lhs, const T& rhs) const {
      return lhs.state_ == State::value &&
        EqualT::operator() (lhs.value_, rhs);
    }
    bool operator() (const T& lhs, const key_wrapper& rhs) const {
      return rhs.state_ == State::value &&
        EqualT::operator() (lhs, rhs.value_);
    }
    bool operator() (const T& lhs, const T& rhs) const {
      return EqualT::operator() (lhs, rhs);
    }
  };
  template <class HashT>
  struct Hash: public HashT {
    size_t operator() (const key_wrapper& w) const {
      return HashT::operator() (w.value_);
    }
    size_t operator() (const T& v) const {
      return HashT::operator() (v);
    }
  };
  static key_wrapper get_empty() { return key_wrapper(State::empty); }
  static key_wrapper get_deleted() { return key_wrapper(State::deleted); }
  key_wrapper() : state_(State::empty) {}
  key_wrapper(const T& value) : state_(State::value), value_(value) {}
  key_wrapper(T&& value) : state_(State::value), value_(std::move(value)) {}
  template <class Arg1,
            class... Args,
            class = typename std::enable_if<
                !std::is_same<
                    State,
                    typename std::decay<Arg1>::type>::value>::type>
  explicit key_wrapper(Arg1&& arg1, Args&& ...args)
    : state_(State::value), value_(std::forward<Arg1>(arg1), std::forward<Args>(args)...)
  {}
  key_wrapper(const key_wrapper&) = default;
  key_wrapper(key_wrapper&&) = default;
  key_wrapper& operator= (const key_wrapper&) = default;
  key_wrapper& operator= (key_wrapper&&) = default;
  T& unwrap() { return value_; }
  const T& unwrap() const { return value_; }
  friend bool operator== (const key_wrapper& lhs, const key_wrapper& rhs) {
    return lhs.state_ == rhs.state_ && (lhs.state_ != State::value || lhs.value_ == rhs.value_);
  }
  friend bool operator!= (const key_wrapper& lhs, const key_wrapper& rhs) {
    return lhs.state_ != rhs.state_ || lhs.state_ == State::value && lhs.value_ != rhs.value_;
  }
  friend bool operator< (const key_wrapper& lhs, const key_wrapper& rhs) {
    return lhs.state_ == State::value && lhs.state_ == rhs.state_ && lhs.value_ < rhs.value_;
  }
};

template <class T, class UnderlyingIterator>
class wrapped_const_iterator
    : public UnderlyingIterator {
 public:
  typedef T value_type;
  typedef const T* pointer;
  typedef const T* const_pointer;
  typedef const T& reference;
  typedef const T& const_reference;
  explicit wrapped_const_iterator(const UnderlyingIterator& it): UnderlyingIterator(it) {}
  explicit wrapped_const_iterator(UnderlyingIterator&& it): UnderlyingIterator(std::move(it)) {}
  wrapped_const_iterator(const wrapped_const_iterator&) = default;
  wrapped_const_iterator(wrapped_const_iterator&&) = default;
  wrapped_const_iterator& operator= (const wrapped_const_iterator&) = default;
  wrapped_const_iterator& operator= (wrapped_const_iterator&&) = default;

  reference operator* () const { return UnderlyingIterator::operator*().unwrap(); }
  pointer operator-> () const { return &(operator*()); }
  wrapped_const_iterator& operator++ () {
    UnderlyingIterator::operator++();
    return *this;
  }
  wrapped_const_iterator operator++ (int) {
    return wrapped_const_iterator(UnderlyingIterator::operator++(0));
  }
};

} // detail namespace

template <class Value, class HashFcn = std::hash<Value>,
          class EqualKey = std::equal_to<Value>,
          template <class...> class Alloc = google::libc_allocator_with_realloc>
class wrapped_dense_hash_set {
 private:
  typedef detail::key_wrapper<Value> wrapped_type;
  typedef typename wrapped_type::template Equal<EqualKey> equal_key;
  typedef typename wrapped_type::template Hash<HashFcn> hash_key;
  typedef Alloc<wrapped_type> alloc_value;
  struct extract_key {
    const wrapped_type& operator() (const wrapped_type& w) const {
      return w;
    }
    const wrapped_type& operator() (wrapped_type& w) const {
      return w;
    }
    const wrapped_type& operator() (wrapped_type&& w) const {
      return w;
    }
    const Value& operator() (const Value& v) const { return v; }
    const Value& operator() (Value& v) const { return v; }
    Value&& operator() (Value&& v) const { return std::move(v); }
    template <class... Args>
    wrapped_type operator() (Args&& ...args) const {
      return wrapped_type(std::forward<Args>(args)...);
    }
  };
  struct construct_value {
    template <class V, class... Args>
    void operator() (void* dst, V&& v, Args&&...) const {
      new (dst) wrapped_type(std::forward<V>(v));
    }
  };
  struct set_key {
    void operator() (wrapped_type* value, const wrapped_type& key) const {
      *value = key;
    }
    void operator() (wrapped_type* value, const wrapped_type& key, bool) const {
      new (value) wrapped_type(key);
    }
  };

  typedef google::dense_hashtable<wrapped_type, wrapped_type, hash_key, extract_key, set_key,
                                  construct_value, equal_key, alloc_value> ht;
  ht rep;
 public:
  typedef Value key_type;
  typedef Value value_type;
  typedef typename ht::hasher hasher;
  typedef typename ht::key_equal key_equal;
  typedef alloc_value allocator_type;

  typedef typename ht::size_type size_type;
  typedef typename ht::difference_type difference_type;
  typedef const Value* pointer;
  typedef const Value* const_pointer;
  typedef const Value& reference;
  typedef const Value& const_reference;

  typedef detail::wrapped_const_iterator<Value, typename ht::const_iterator> iterator;
  typedef iterator const_iterator;
  typedef iterator local_iterator;
  typedef iterator const_local_iterator;

  // Iterator functions -- recall all iterators are const
  iterator begin() const { return iterator(rep.begin()); }
  iterator end() const { return iterator(rep.end()); }
  const_iterator cbegin() const { return const_iterator(rep.begin()); }
  const_iterator cend() const { return const_iterator(rep.end()); }

  // These come from std's unordered_set. For us, a bucket has 0 or 1 elements.
  local_iterator begin(size_type i) const { return local_iterator(rep.begin(i)); }
  local_iterator end(size_type i) const { return local_iterator(rep.end(i)); }

  // Accessor functions
  allocator_type get_allocator() const { return rep.get_allocator(); }
  hasher hash_function() const { return rep.hash_function(); }
  key_equal key_eq() const { return rep.key_eq(); }

  // Constructors
  explicit wrapped_dense_hash_set(size_type expected_max_items_in_table = 0,
                                  const hasher& hf = hasher(),
                                  const key_equal& eql = key_equal(),
                                  const allocator_type& alloc = allocator_type())
      : rep(expected_max_items_in_table, hf, eql, extract_key(), set_key(), construct_value(), alloc) {
    rep.set_empty_key(wrapped_type::get_empty());
    rep.set_deleted_key(wrapped_type::get_deleted());
  }

  template <class InputIterator>
  wrapped_dense_hash_set(InputIterator f, InputIterator l,
                         size_type expected_max_items_in_table = 0,
                         const hasher& hf = hasher(),
                         const key_equal& eql = key_equal(),
                         const allocator_type& alloc = allocator_type())
      : rep(expected_max_items_in_table, hf, eql, extract_key(), set_key(), construct_value(), alloc) {
    rep.set_empty_key(wrapped_type::get_empty());
    rep.set_deleted_key(wrapped_type::get_deleted());
    rep.insert(f, l);
  }
  // We use the default copy/move constructor
  // We use the default operator=()
  // We use the default destructor

  void clear() { rep.clear(); }
  // This clears the hash set without resizing it down to the minimum
  // bucket count, but rather keeps the number of buckets constant
  void clear_no_resize() { rep.clear_no_resize(); }
  void swap(wrapped_dense_hash_set& hs) { rep.swap(hs.rep); }

  // Functions concerning size
  size_type size() const { return rep.size(); }
  size_type max_size() const { return rep.max_size(); }
  bool empty() const { return rep.empty(); }
  size_type bucket_count() const { return rep.bucket_count(); }
  size_type max_bucket_count() const { return rep.max_bucket_count(); }

  // These are std methods.  bucket() is the bucket the key is or would be in.
  size_type bucket_size(size_type i) const { return rep.bucket_size(i); }
  size_type bucket(const key_type& key) const { return rep.bucket(key); }
  float load_factor() const { return size() * 1.0f / bucket_count(); }
  float max_load_factor() const {
    float shrink, grow;
    rep.get_resizing_parameters(&shrink, &grow);
    return grow;
  }
  void max_load_factor(float new_grow) {
    float shrink, grow;
    rep.get_resizing_parameters(&shrink, &grow);
    rep.set_resizing_parameters(shrink, new_grow);
  }
  // These aren't std methods but perhaps ought to be.
  float min_load_factor() const {
    float shrink, grow;
    rep.get_resizing_parameters(&shrink, &grow);
    return shrink;
  }
  void min_load_factor(float new_shrink) {
    float shrink, grow;
    rep.get_resizing_parameters(&shrink, &grow);
    rep.set_resizing_parameters(new_shrink, grow);
  }

  void resize(size_type hint) { rep.resize(hint); }
  void rehash(size_type hint) { resize(hint); }  // the std name

  // Lookup routines
  iterator find(const key_type& key) const { return iterator(rep.find(key)); }

  size_type count(const key_type& key) const { return rep.count(key); }

  std::pair<iterator, iterator> equal_range(const key_type& key) const {
    auto res = rep.equal_range(key);
    return std::make_pair(iterator(std::move(res.first)), iterator(std::move(res.second)));
  }

  // Insertion routines
  std::pair<iterator, bool> insert(const value_type& obj) {
    auto res = rep.insert(obj);
    return std::make_pair(iterator(res.first), res.second);
  }

  std::pair<iterator, bool> insert(value_type&& obj) {
    auto res = rep.insert(std::move(obj));
    return std::make_pair(iterator(res.first), res.second);
  }

  // hint is ignored
  iterator insert(iterator, const value_type& obj) { return iterator(insert(obj).first); }
  iterator insert(iterator, value_type&& obj) { return iterator(insert(std::move(obj)).first); }

  template <class InputIterator>
  void insert(InputIterator f, InputIterator l) {
    rep.insert(f, l);
  }

  void insert(std::initializer_list<value_type> ilist) { insert(ilist.begin(), ilist.end()); }

  template <class... Args>
  std::pair<iterator, bool> emplace(Args&&... args) {
    auto res = rep.emplace(std::forward<Args>(args)...);
    return std::make_pair(iterator(res.first), res.second);
  }

  template <class... Args>
  iterator emplace_hint(const_iterator hint, Args&&... args) {
    return iterator(rep.emplace_hint(hint, std::forward<Args>(args)...));
  }

  // Deletion routines
  size_type erase(const key_type& key) { return rep.erase(key); }
  iterator erase(const_iterator it) { return iterator(rep.erase(it)); }
  iterator erase(const_iterator f, const_iterator l) { return iterator(rep.erase(f, l)); }

  // Comparison
  friend bool operator== (const wrapped_dense_hash_set& lhs, const wrapped_dense_hash_set& rhs) {
    return lhs.rep == rhs.rep;
  }
  friend bool operator!= (const wrapped_dense_hash_set& lhs, const wrapped_dense_hash_set& rhs) {
    return lhs.rep != rhs.rep;
  }
  
  // I/O -- this is an add-on for writing metainformation to disk
  //
  // For maximum flexibility, this does not assume a particular
  // file type (though it will probably be a FILE *).  We just pass
  // the fp through to rep.

  // If your keys and values are simple enough, you can pass this
  // serializer to serialize()/unserialize().  "Simple enough" means
  // value_type is a POD type that contains no pointers.  Note,
  // however, we don't try to normalize endianness.
  typedef typename ht::NopointerSerializer NopointerSerializer;

  // serializer: a class providing operator()(OUTPUT*, const value_type&)
  //    (writing value_type to OUTPUT).  You can specify a
  //    NopointerSerializer object if appropriate (see above).
  // fp: either a FILE*, OR an ostream*/subclass_of_ostream*, OR a
  //    pointer to a class providing size_t Write(const void*, size_t),
  //    which writes a buffer into a stream (which fp presumably
  //    owns) and returns the number of bytes successfully written.
  //    Note basic_ostream<not_char> is not currently supported.
  template <typename ValueSerializer, typename OUTPUT>
  bool serialize(ValueSerializer serializer, OUTPUT* fp) {
    return rep.serialize(serializer, fp);
  }

  // serializer: a functor providing operator()(INPUT*, value_type*)
  //    (reading from INPUT and into value_type).  You can specify a
  //    NopointerSerializer object if appropriate (see above).
  // fp: either a FILE*, OR an istream*/subclass_of_istream*, OR a
  //    pointer to a class providing size_t Read(void*, size_t),
  //    which reads into a buffer from a stream (which fp presumably
  //    owns) and returns the number of bytes successfully read.
  //    Note basic_istream<not_char> is not currently supported.
  template <typename ValueSerializer, typename INPUT>
  bool unserialize(ValueSerializer serializer, INPUT* fp) {
    return rep.unserialize(serializer, fp);
  }
};

template <class Val, class HashFcn, class EqualKey, template <class...> class Alloc>
inline void swap(wrapped_dense_hash_set<Val, HashFcn, EqualKey, Alloc>& hs1,
                 wrapped_dense_hash_set<Val, HashFcn, EqualKey, Alloc>& hs2) {
  hs1.swap(hs2);
}

} // sparsehash namespace

